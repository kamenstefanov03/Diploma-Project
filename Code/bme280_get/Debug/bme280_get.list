
bme280_get.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018ec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080019ac  080019ac  000119ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080019c8  080019c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080019c8  080019c8  000119c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080019d0  080019d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019d0  080019d0  000119d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080019d4  080019d4  000119d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080019d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  080019e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  080019e4  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000509b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001106  00000000  00000000  000250cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000590  00000000  00000000  000261d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004f8  00000000  00000000  00026768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001089  00000000  00000000  00026c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000684f  00000000  00000000  00027ce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000747b5  00000000  00000000  0002e538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a2ced  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000130c  00000000  00000000  000a2d40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001994 	.word	0x08001994

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001994 	.word	0x08001994

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8d8 	bl	8000490 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8d3 	bl	8000490 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzsi2>:
 8000454:	211c      	movs	r1, #28
 8000456:	2301      	movs	r3, #1
 8000458:	041b      	lsls	r3, r3, #16
 800045a:	4298      	cmp	r0, r3
 800045c:	d301      	bcc.n	8000462 <__clzsi2+0xe>
 800045e:	0c00      	lsrs	r0, r0, #16
 8000460:	3910      	subs	r1, #16
 8000462:	0a1b      	lsrs	r3, r3, #8
 8000464:	4298      	cmp	r0, r3
 8000466:	d301      	bcc.n	800046c <__clzsi2+0x18>
 8000468:	0a00      	lsrs	r0, r0, #8
 800046a:	3908      	subs	r1, #8
 800046c:	091b      	lsrs	r3, r3, #4
 800046e:	4298      	cmp	r0, r3
 8000470:	d301      	bcc.n	8000476 <__clzsi2+0x22>
 8000472:	0900      	lsrs	r0, r0, #4
 8000474:	3904      	subs	r1, #4
 8000476:	a202      	add	r2, pc, #8	; (adr r2, 8000480 <__clzsi2+0x2c>)
 8000478:	5c10      	ldrb	r0, [r2, r0]
 800047a:	1840      	adds	r0, r0, r1
 800047c:	4770      	bx	lr
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	02020304 	.word	0x02020304
 8000484:	01010101 	.word	0x01010101
	...

08000490 <__clzdi2>:
 8000490:	b510      	push	{r4, lr}
 8000492:	2900      	cmp	r1, #0
 8000494:	d103      	bne.n	800049e <__clzdi2+0xe>
 8000496:	f7ff ffdd 	bl	8000454 <__clzsi2>
 800049a:	3020      	adds	r0, #32
 800049c:	e002      	b.n	80004a4 <__clzdi2+0x14>
 800049e:	0008      	movs	r0, r1
 80004a0:	f7ff ffd8 	bl	8000454 <__clzsi2>
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);

int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0



  HAL_Init();
 80004ac:	f000 f94e 	bl	800074c <HAL_Init>

  SystemClock_Config();
 80004b0:	f000 f806 	bl	80004c0 <SystemClock_Config>



  MX_GPIO_Init();
 80004b4:	f000 f890 	bl	80005d8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004b8:	f000 f856 	bl	8000568 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004bc:	e7fe      	b.n	80004bc <main+0x14>
	...

080004c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b095      	sub	sp, #84	; 0x54
 80004c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c6:	2418      	movs	r4, #24
 80004c8:	193b      	adds	r3, r7, r4
 80004ca:	0018      	movs	r0, r3
 80004cc:	2338      	movs	r3, #56	; 0x38
 80004ce:	001a      	movs	r2, r3
 80004d0:	2100      	movs	r1, #0
 80004d2:	f001 fa57 	bl	8001984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d6:	1d3b      	adds	r3, r7, #4
 80004d8:	0018      	movs	r0, r3
 80004da:	2314      	movs	r3, #20
 80004dc:	001a      	movs	r2, r3
 80004de:	2100      	movs	r1, #0
 80004e0:	f001 fa50 	bl	8001984 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004e4:	4b1e      	ldr	r3, [pc, #120]	; (8000560 <SystemClock_Config+0xa0>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a1e      	ldr	r2, [pc, #120]	; (8000564 <SystemClock_Config+0xa4>)
 80004ea:	401a      	ands	r2, r3
 80004ec:	4b1c      	ldr	r3, [pc, #112]	; (8000560 <SystemClock_Config+0xa0>)
 80004ee:	2180      	movs	r1, #128	; 0x80
 80004f0:	0109      	lsls	r1, r1, #4
 80004f2:	430a      	orrs	r2, r1
 80004f4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004f6:	0021      	movs	r1, r4
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	2210      	movs	r2, #16
 80004fc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	2201      	movs	r2, #1
 8000502:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000504:	187b      	adds	r3, r7, r1
 8000506:	2200      	movs	r2, #0
 8000508:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800050a:	187b      	adds	r3, r7, r1
 800050c:	22a0      	movs	r2, #160	; 0xa0
 800050e:	0212      	lsls	r2, r2, #8
 8000510:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2200      	movs	r2, #0
 8000516:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000518:	187b      	adds	r3, r7, r1
 800051a:	0018      	movs	r0, r3
 800051c:	f000 fbb8 	bl	8000c90 <HAL_RCC_OscConfig>
 8000520:	1e03      	subs	r3, r0, #0
 8000522:	d001      	beq.n	8000528 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000524:	f000 f86e 	bl	8000604 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	220f      	movs	r2, #15
 800052c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	2200      	movs	r2, #0
 8000532:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	2200      	movs	r2, #0
 8000538:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	2200      	movs	r2, #0
 800053e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	2200      	movs	r2, #0
 8000544:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	2100      	movs	r1, #0
 800054a:	0018      	movs	r0, r3
 800054c:	f000 ff74 	bl	8001438 <HAL_RCC_ClockConfig>
 8000550:	1e03      	subs	r3, r0, #0
 8000552:	d001      	beq.n	8000558 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000554:	f000 f856 	bl	8000604 <Error_Handler>
  }
}
 8000558:	46c0      	nop			; (mov r8, r8)
 800055a:	46bd      	mov	sp, r7
 800055c:	b015      	add	sp, #84	; 0x54
 800055e:	bd90      	pop	{r4, r7, pc}
 8000560:	40007000 	.word	0x40007000
 8000564:	ffffe7ff 	.word	0xffffe7ff

08000568 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800056c:	4b18      	ldr	r3, [pc, #96]	; (80005d0 <MX_SPI1_Init+0x68>)
 800056e:	4a19      	ldr	r2, [pc, #100]	; (80005d4 <MX_SPI1_Init+0x6c>)
 8000570:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000572:	4b17      	ldr	r3, [pc, #92]	; (80005d0 <MX_SPI1_Init+0x68>)
 8000574:	2282      	movs	r2, #130	; 0x82
 8000576:	0052      	lsls	r2, r2, #1
 8000578:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800057a:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <MX_SPI1_Init+0x68>)
 800057c:	2280      	movs	r2, #128	; 0x80
 800057e:	0212      	lsls	r2, r2, #8
 8000580:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000582:	4b13      	ldr	r3, [pc, #76]	; (80005d0 <MX_SPI1_Init+0x68>)
 8000584:	2200      	movs	r2, #0
 8000586:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000588:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <MX_SPI1_Init+0x68>)
 800058a:	2200      	movs	r2, #0
 800058c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800058e:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <MX_SPI1_Init+0x68>)
 8000590:	2200      	movs	r2, #0
 8000592:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <MX_SPI1_Init+0x68>)
 8000596:	2280      	movs	r2, #128	; 0x80
 8000598:	0092      	lsls	r2, r2, #2
 800059a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800059c:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <MX_SPI1_Init+0x68>)
 800059e:	2200      	movs	r2, #0
 80005a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <MX_SPI1_Init+0x68>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005a8:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <MX_SPI1_Init+0x68>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <MX_SPI1_Init+0x68>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <MX_SPI1_Init+0x68>)
 80005b6:	2207      	movs	r2, #7
 80005b8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005ba:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <MX_SPI1_Init+0x68>)
 80005bc:	0018      	movs	r0, r3
 80005be:	f001 f929 	bl	8001814 <HAL_SPI_Init>
 80005c2:	1e03      	subs	r3, r0, #0
 80005c4:	d001      	beq.n	80005ca <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80005c6:	f000 f81d 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000028 	.word	0x20000028
 80005d4:	40013000 	.word	0x40013000

080005d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <MX_GPIO_Init+0x28>)
 80005e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005e2:	4b07      	ldr	r3, [pc, #28]	; (8000600 <MX_GPIO_Init+0x28>)
 80005e4:	2102      	movs	r1, #2
 80005e6:	430a      	orrs	r2, r1
 80005e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80005ea:	4b05      	ldr	r3, [pc, #20]	; (8000600 <MX_GPIO_Init+0x28>)
 80005ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005ee:	2202      	movs	r2, #2
 80005f0:	4013      	ands	r3, r2
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]

}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	46bd      	mov	sp, r7
 80005fa:	b002      	add	sp, #8
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	40021000 	.word	0x40021000

08000604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000608:	b672      	cpsid	i
}
 800060a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800060c:	e7fe      	b.n	800060c <Error_Handler+0x8>
	...

08000610 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <HAL_MspInit+0x24>)
 8000616:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_MspInit+0x24>)
 800061a:	2101      	movs	r1, #1
 800061c:	430a      	orrs	r2, r1
 800061e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	4b04      	ldr	r3, [pc, #16]	; (8000634 <HAL_MspInit+0x24>)
 8000622:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <HAL_MspInit+0x24>)
 8000626:	2180      	movs	r1, #128	; 0x80
 8000628:	0549      	lsls	r1, r1, #21
 800062a:	430a      	orrs	r2, r1
 800062c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40021000 	.word	0x40021000

08000638 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b089      	sub	sp, #36	; 0x24
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000640:	240c      	movs	r4, #12
 8000642:	193b      	adds	r3, r7, r4
 8000644:	0018      	movs	r0, r3
 8000646:	2314      	movs	r3, #20
 8000648:	001a      	movs	r2, r3
 800064a:	2100      	movs	r1, #0
 800064c:	f001 f99a 	bl	8001984 <memset>
  if(hspi->Instance==SPI1)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a17      	ldr	r2, [pc, #92]	; (80006b4 <HAL_SPI_MspInit+0x7c>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d128      	bne.n	80006ac <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800065a:	4b17      	ldr	r3, [pc, #92]	; (80006b8 <HAL_SPI_MspInit+0x80>)
 800065c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800065e:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <HAL_SPI_MspInit+0x80>)
 8000660:	2180      	movs	r1, #128	; 0x80
 8000662:	0149      	lsls	r1, r1, #5
 8000664:	430a      	orrs	r2, r1
 8000666:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000668:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <HAL_SPI_MspInit+0x80>)
 800066a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800066c:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <HAL_SPI_MspInit+0x80>)
 800066e:	2102      	movs	r1, #2
 8000670:	430a      	orrs	r2, r1
 8000672:	62da      	str	r2, [r3, #44]	; 0x2c
 8000674:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <HAL_SPI_MspInit+0x80>)
 8000676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000678:	2202      	movs	r2, #2
 800067a:	4013      	ands	r3, r2
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000680:	0021      	movs	r1, r4
 8000682:	187b      	adds	r3, r7, r1
 8000684:	2228      	movs	r2, #40	; 0x28
 8000686:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000688:	187b      	adds	r3, r7, r1
 800068a:	2202      	movs	r2, #2
 800068c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	187b      	adds	r3, r7, r1
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2203      	movs	r2, #3
 8000698:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	4a06      	ldr	r2, [pc, #24]	; (80006bc <HAL_SPI_MspInit+0x84>)
 80006a4:	0019      	movs	r1, r3
 80006a6:	0010      	movs	r0, r2
 80006a8:	f000 f974 	bl	8000994 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	b009      	add	sp, #36	; 0x24
 80006b2:	bd90      	pop	{r4, r7, pc}
 80006b4:	40013000 	.word	0x40013000
 80006b8:	40021000 	.word	0x40021000
 80006bc:	50000400 	.word	0x50000400

080006c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <NMI_Handler+0x4>

080006c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ca:	e7fe      	b.n	80006ca <HardFault_Handler+0x4>

080006cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e4:	f000 f886 	bl	80007f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006e8:	46c0      	nop			; (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80006f8:	480d      	ldr	r0, [pc, #52]	; (8000730 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80006fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006fc:	480d      	ldr	r0, [pc, #52]	; (8000734 <LoopForever+0x6>)
  ldr r1, =_edata
 80006fe:	490e      	ldr	r1, [pc, #56]	; (8000738 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000700:	4a0e      	ldr	r2, [pc, #56]	; (800073c <LoopForever+0xe>)
  movs r3, #0
 8000702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000704:	e002      	b.n	800070c <LoopCopyDataInit>

08000706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800070a:	3304      	adds	r3, #4

0800070c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800070c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000710:	d3f9      	bcc.n	8000706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000712:	4a0b      	ldr	r2, [pc, #44]	; (8000740 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000714:	4c0b      	ldr	r4, [pc, #44]	; (8000744 <LoopForever+0x16>)
  movs r3, #0
 8000716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000718:	e001      	b.n	800071e <LoopFillZerobss>

0800071a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800071a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800071c:	3204      	adds	r2, #4

0800071e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000720:	d3fb      	bcc.n	800071a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000722:	f7ff ffe4 	bl	80006ee <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000726:	f001 f909 	bl	800193c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800072a:	f7ff febd 	bl	80004a8 <main>

0800072e <LoopForever>:

LoopForever:
    b LoopForever
 800072e:	e7fe      	b.n	800072e <LoopForever>
   ldr   r0, =_estack
 8000730:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000738:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800073c:	080019d8 	.word	0x080019d8
  ldr r2, =_sbss
 8000740:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000744:	20000084 	.word	0x20000084

08000748 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000748:	e7fe      	b.n	8000748 <ADC1_COMP_IRQHandler>
	...

0800074c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000752:	1dfb      	adds	r3, r7, #7
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000758:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <HAL_Init+0x3c>)
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <HAL_Init+0x3c>)
 800075e:	2140      	movs	r1, #64	; 0x40
 8000760:	430a      	orrs	r2, r1
 8000762:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000764:	2003      	movs	r0, #3
 8000766:	f000 f811 	bl	800078c <HAL_InitTick>
 800076a:	1e03      	subs	r3, r0, #0
 800076c:	d003      	beq.n	8000776 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800076e:	1dfb      	adds	r3, r7, #7
 8000770:	2201      	movs	r2, #1
 8000772:	701a      	strb	r2, [r3, #0]
 8000774:	e001      	b.n	800077a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000776:	f7ff ff4b 	bl	8000610 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800077a:	1dfb      	adds	r3, r7, #7
 800077c:	781b      	ldrb	r3, [r3, #0]
}
 800077e:	0018      	movs	r0, r3
 8000780:	46bd      	mov	sp, r7
 8000782:	b002      	add	sp, #8
 8000784:	bd80      	pop	{r7, pc}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	40022000 	.word	0x40022000

0800078c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800078c:	b590      	push	{r4, r7, lr}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000794:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <HAL_InitTick+0x5c>)
 8000796:	681c      	ldr	r4, [r3, #0]
 8000798:	4b14      	ldr	r3, [pc, #80]	; (80007ec <HAL_InitTick+0x60>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	0019      	movs	r1, r3
 800079e:	23fa      	movs	r3, #250	; 0xfa
 80007a0:	0098      	lsls	r0, r3, #2
 80007a2:	f7ff fcb1 	bl	8000108 <__udivsi3>
 80007a6:	0003      	movs	r3, r0
 80007a8:	0019      	movs	r1, r3
 80007aa:	0020      	movs	r0, r4
 80007ac:	f7ff fcac 	bl	8000108 <__udivsi3>
 80007b0:	0003      	movs	r3, r0
 80007b2:	0018      	movs	r0, r3
 80007b4:	f000 f8e1 	bl	800097a <HAL_SYSTICK_Config>
 80007b8:	1e03      	subs	r3, r0, #0
 80007ba:	d001      	beq.n	80007c0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007bc:	2301      	movs	r3, #1
 80007be:	e00f      	b.n	80007e0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2b03      	cmp	r3, #3
 80007c4:	d80b      	bhi.n	80007de <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	2301      	movs	r3, #1
 80007ca:	425b      	negs	r3, r3
 80007cc:	2200      	movs	r2, #0
 80007ce:	0018      	movs	r0, r3
 80007d0:	f000 f8be 	bl	8000950 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <HAL_InitTick+0x64>)
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007da:	2300      	movs	r3, #0
 80007dc:	e000      	b.n	80007e0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
}
 80007e0:	0018      	movs	r0, r3
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b003      	add	sp, #12
 80007e6:	bd90      	pop	{r4, r7, pc}
 80007e8:	20000000 	.word	0x20000000
 80007ec:	20000008 	.word	0x20000008
 80007f0:	20000004 	.word	0x20000004

080007f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <HAL_IncTick+0x1c>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	001a      	movs	r2, r3
 80007fe:	4b05      	ldr	r3, [pc, #20]	; (8000814 <HAL_IncTick+0x20>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	18d2      	adds	r2, r2, r3
 8000804:	4b03      	ldr	r3, [pc, #12]	; (8000814 <HAL_IncTick+0x20>)
 8000806:	601a      	str	r2, [r3, #0]
}
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	20000008 	.word	0x20000008
 8000814:	20000080 	.word	0x20000080

08000818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  return uwTick;
 800081c:	4b02      	ldr	r3, [pc, #8]	; (8000828 <HAL_GetTick+0x10>)
 800081e:	681b      	ldr	r3, [r3, #0]
}
 8000820:	0018      	movs	r0, r3
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	20000080 	.word	0x20000080

0800082c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800082c:	b590      	push	{r4, r7, lr}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	0002      	movs	r2, r0
 8000834:	6039      	str	r1, [r7, #0]
 8000836:	1dfb      	adds	r3, r7, #7
 8000838:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800083a:	1dfb      	adds	r3, r7, #7
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b7f      	cmp	r3, #127	; 0x7f
 8000840:	d828      	bhi.n	8000894 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000842:	4a2f      	ldr	r2, [pc, #188]	; (8000900 <__NVIC_SetPriority+0xd4>)
 8000844:	1dfb      	adds	r3, r7, #7
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	b25b      	sxtb	r3, r3
 800084a:	089b      	lsrs	r3, r3, #2
 800084c:	33c0      	adds	r3, #192	; 0xc0
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	589b      	ldr	r3, [r3, r2]
 8000852:	1dfa      	adds	r2, r7, #7
 8000854:	7812      	ldrb	r2, [r2, #0]
 8000856:	0011      	movs	r1, r2
 8000858:	2203      	movs	r2, #3
 800085a:	400a      	ands	r2, r1
 800085c:	00d2      	lsls	r2, r2, #3
 800085e:	21ff      	movs	r1, #255	; 0xff
 8000860:	4091      	lsls	r1, r2
 8000862:	000a      	movs	r2, r1
 8000864:	43d2      	mvns	r2, r2
 8000866:	401a      	ands	r2, r3
 8000868:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	019b      	lsls	r3, r3, #6
 800086e:	22ff      	movs	r2, #255	; 0xff
 8000870:	401a      	ands	r2, r3
 8000872:	1dfb      	adds	r3, r7, #7
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	0018      	movs	r0, r3
 8000878:	2303      	movs	r3, #3
 800087a:	4003      	ands	r3, r0
 800087c:	00db      	lsls	r3, r3, #3
 800087e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000880:	481f      	ldr	r0, [pc, #124]	; (8000900 <__NVIC_SetPriority+0xd4>)
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	b25b      	sxtb	r3, r3
 8000888:	089b      	lsrs	r3, r3, #2
 800088a:	430a      	orrs	r2, r1
 800088c:	33c0      	adds	r3, #192	; 0xc0
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000892:	e031      	b.n	80008f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000894:	4a1b      	ldr	r2, [pc, #108]	; (8000904 <__NVIC_SetPriority+0xd8>)
 8000896:	1dfb      	adds	r3, r7, #7
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	0019      	movs	r1, r3
 800089c:	230f      	movs	r3, #15
 800089e:	400b      	ands	r3, r1
 80008a0:	3b08      	subs	r3, #8
 80008a2:	089b      	lsrs	r3, r3, #2
 80008a4:	3306      	adds	r3, #6
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	18d3      	adds	r3, r2, r3
 80008aa:	3304      	adds	r3, #4
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	1dfa      	adds	r2, r7, #7
 80008b0:	7812      	ldrb	r2, [r2, #0]
 80008b2:	0011      	movs	r1, r2
 80008b4:	2203      	movs	r2, #3
 80008b6:	400a      	ands	r2, r1
 80008b8:	00d2      	lsls	r2, r2, #3
 80008ba:	21ff      	movs	r1, #255	; 0xff
 80008bc:	4091      	lsls	r1, r2
 80008be:	000a      	movs	r2, r1
 80008c0:	43d2      	mvns	r2, r2
 80008c2:	401a      	ands	r2, r3
 80008c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	019b      	lsls	r3, r3, #6
 80008ca:	22ff      	movs	r2, #255	; 0xff
 80008cc:	401a      	ands	r2, r3
 80008ce:	1dfb      	adds	r3, r7, #7
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	0018      	movs	r0, r3
 80008d4:	2303      	movs	r3, #3
 80008d6:	4003      	ands	r3, r0
 80008d8:	00db      	lsls	r3, r3, #3
 80008da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008dc:	4809      	ldr	r0, [pc, #36]	; (8000904 <__NVIC_SetPriority+0xd8>)
 80008de:	1dfb      	adds	r3, r7, #7
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	001c      	movs	r4, r3
 80008e4:	230f      	movs	r3, #15
 80008e6:	4023      	ands	r3, r4
 80008e8:	3b08      	subs	r3, #8
 80008ea:	089b      	lsrs	r3, r3, #2
 80008ec:	430a      	orrs	r2, r1
 80008ee:	3306      	adds	r3, #6
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	18c3      	adds	r3, r0, r3
 80008f4:	3304      	adds	r3, #4
 80008f6:	601a      	str	r2, [r3, #0]
}
 80008f8:	46c0      	nop			; (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	b003      	add	sp, #12
 80008fe:	bd90      	pop	{r4, r7, pc}
 8000900:	e000e100 	.word	0xe000e100
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	1e5a      	subs	r2, r3, #1
 8000914:	2380      	movs	r3, #128	; 0x80
 8000916:	045b      	lsls	r3, r3, #17
 8000918:	429a      	cmp	r2, r3
 800091a:	d301      	bcc.n	8000920 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800091c:	2301      	movs	r3, #1
 800091e:	e010      	b.n	8000942 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000920:	4b0a      	ldr	r3, [pc, #40]	; (800094c <SysTick_Config+0x44>)
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	3a01      	subs	r2, #1
 8000926:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000928:	2301      	movs	r3, #1
 800092a:	425b      	negs	r3, r3
 800092c:	2103      	movs	r1, #3
 800092e:	0018      	movs	r0, r3
 8000930:	f7ff ff7c 	bl	800082c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <SysTick_Config+0x44>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800093a:	4b04      	ldr	r3, [pc, #16]	; (800094c <SysTick_Config+0x44>)
 800093c:	2207      	movs	r2, #7
 800093e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000940:	2300      	movs	r3, #0
}
 8000942:	0018      	movs	r0, r3
 8000944:	46bd      	mov	sp, r7
 8000946:	b002      	add	sp, #8
 8000948:	bd80      	pop	{r7, pc}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	e000e010 	.word	0xe000e010

08000950 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	60b9      	str	r1, [r7, #8]
 8000958:	607a      	str	r2, [r7, #4]
 800095a:	210f      	movs	r1, #15
 800095c:	187b      	adds	r3, r7, r1
 800095e:	1c02      	adds	r2, r0, #0
 8000960:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	187b      	adds	r3, r7, r1
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	b25b      	sxtb	r3, r3
 800096a:	0011      	movs	r1, r2
 800096c:	0018      	movs	r0, r3
 800096e:	f7ff ff5d 	bl	800082c <__NVIC_SetPriority>
}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	46bd      	mov	sp, r7
 8000976:	b004      	add	sp, #16
 8000978:	bd80      	pop	{r7, pc}

0800097a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	0018      	movs	r0, r3
 8000986:	f7ff ffbf 	bl	8000908 <SysTick_Config>
 800098a:	0003      	movs	r3, r0
}
 800098c:	0018      	movs	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	b002      	add	sp, #8
 8000992:	bd80      	pop	{r7, pc}

08000994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80009a6:	2300      	movs	r3, #0
 80009a8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80009aa:	e155      	b.n	8000c58 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2101      	movs	r1, #1
 80009b2:	697a      	ldr	r2, [r7, #20]
 80009b4:	4091      	lsls	r1, r2
 80009b6:	000a      	movs	r2, r1
 80009b8:	4013      	ands	r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d100      	bne.n	80009c4 <HAL_GPIO_Init+0x30>
 80009c2:	e146      	b.n	8000c52 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	2203      	movs	r2, #3
 80009ca:	4013      	ands	r3, r2
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d005      	beq.n	80009dc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	2203      	movs	r2, #3
 80009d6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d130      	bne.n	8000a3e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	2203      	movs	r2, #3
 80009e8:	409a      	lsls	r2, r3
 80009ea:	0013      	movs	r3, r2
 80009ec:	43da      	mvns	r2, r3
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	4013      	ands	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	68da      	ldr	r2, [r3, #12]
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	409a      	lsls	r2, r3
 80009fe:	0013      	movs	r3, r2
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a12:	2201      	movs	r2, #1
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	409a      	lsls	r2, r3
 8000a18:	0013      	movs	r3, r2
 8000a1a:	43da      	mvns	r2, r3
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	091b      	lsrs	r3, r3, #4
 8000a28:	2201      	movs	r2, #1
 8000a2a:	401a      	ands	r2, r3
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	409a      	lsls	r2, r3
 8000a30:	0013      	movs	r3, r2
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	2203      	movs	r2, #3
 8000a44:	4013      	ands	r3, r2
 8000a46:	2b03      	cmp	r3, #3
 8000a48:	d017      	beq.n	8000a7a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	2203      	movs	r2, #3
 8000a56:	409a      	lsls	r2, r3
 8000a58:	0013      	movs	r3, r2
 8000a5a:	43da      	mvns	r2, r3
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	689a      	ldr	r2, [r3, #8]
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	409a      	lsls	r2, r3
 8000a6c:	0013      	movs	r3, r2
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	2203      	movs	r2, #3
 8000a80:	4013      	ands	r3, r2
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	d123      	bne.n	8000ace <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	08da      	lsrs	r2, r3, #3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	3208      	adds	r2, #8
 8000a8e:	0092      	lsls	r2, r2, #2
 8000a90:	58d3      	ldr	r3, [r2, r3]
 8000a92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	2207      	movs	r2, #7
 8000a98:	4013      	ands	r3, r2
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	220f      	movs	r2, #15
 8000a9e:	409a      	lsls	r2, r3
 8000aa0:	0013      	movs	r3, r2
 8000aa2:	43da      	mvns	r2, r3
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	691a      	ldr	r2, [r3, #16]
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	2107      	movs	r1, #7
 8000ab2:	400b      	ands	r3, r1
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	409a      	lsls	r2, r3
 8000ab8:	0013      	movs	r3, r2
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	08da      	lsrs	r2, r3, #3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3208      	adds	r2, #8
 8000ac8:	0092      	lsls	r2, r2, #2
 8000aca:	6939      	ldr	r1, [r7, #16]
 8000acc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	2203      	movs	r2, #3
 8000ada:	409a      	lsls	r2, r3
 8000adc:	0013      	movs	r3, r2
 8000ade:	43da      	mvns	r2, r3
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	2203      	movs	r2, #3
 8000aec:	401a      	ands	r2, r3
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	409a      	lsls	r2, r3
 8000af4:	0013      	movs	r3, r2
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685a      	ldr	r2, [r3, #4]
 8000b06:	23c0      	movs	r3, #192	; 0xc0
 8000b08:	029b      	lsls	r3, r3, #10
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	d100      	bne.n	8000b10 <HAL_GPIO_Init+0x17c>
 8000b0e:	e0a0      	b.n	8000c52 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b10:	4b57      	ldr	r3, [pc, #348]	; (8000c70 <HAL_GPIO_Init+0x2dc>)
 8000b12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b14:	4b56      	ldr	r3, [pc, #344]	; (8000c70 <HAL_GPIO_Init+0x2dc>)
 8000b16:	2101      	movs	r1, #1
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b1c:	4a55      	ldr	r2, [pc, #340]	; (8000c74 <HAL_GPIO_Init+0x2e0>)
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	089b      	lsrs	r3, r3, #2
 8000b22:	3302      	adds	r3, #2
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	589b      	ldr	r3, [r3, r2]
 8000b28:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	2203      	movs	r2, #3
 8000b2e:	4013      	ands	r3, r2
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	220f      	movs	r2, #15
 8000b34:	409a      	lsls	r2, r3
 8000b36:	0013      	movs	r3, r2
 8000b38:	43da      	mvns	r2, r3
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	23a0      	movs	r3, #160	; 0xa0
 8000b44:	05db      	lsls	r3, r3, #23
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d01f      	beq.n	8000b8a <HAL_GPIO_Init+0x1f6>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4a4a      	ldr	r2, [pc, #296]	; (8000c78 <HAL_GPIO_Init+0x2e4>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d019      	beq.n	8000b86 <HAL_GPIO_Init+0x1f2>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4a49      	ldr	r2, [pc, #292]	; (8000c7c <HAL_GPIO_Init+0x2e8>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d013      	beq.n	8000b82 <HAL_GPIO_Init+0x1ee>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a48      	ldr	r2, [pc, #288]	; (8000c80 <HAL_GPIO_Init+0x2ec>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d00d      	beq.n	8000b7e <HAL_GPIO_Init+0x1ea>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a47      	ldr	r2, [pc, #284]	; (8000c84 <HAL_GPIO_Init+0x2f0>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d007      	beq.n	8000b7a <HAL_GPIO_Init+0x1e6>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a46      	ldr	r2, [pc, #280]	; (8000c88 <HAL_GPIO_Init+0x2f4>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d101      	bne.n	8000b76 <HAL_GPIO_Init+0x1e2>
 8000b72:	2305      	movs	r3, #5
 8000b74:	e00a      	b.n	8000b8c <HAL_GPIO_Init+0x1f8>
 8000b76:	2306      	movs	r3, #6
 8000b78:	e008      	b.n	8000b8c <HAL_GPIO_Init+0x1f8>
 8000b7a:	2304      	movs	r3, #4
 8000b7c:	e006      	b.n	8000b8c <HAL_GPIO_Init+0x1f8>
 8000b7e:	2303      	movs	r3, #3
 8000b80:	e004      	b.n	8000b8c <HAL_GPIO_Init+0x1f8>
 8000b82:	2302      	movs	r3, #2
 8000b84:	e002      	b.n	8000b8c <HAL_GPIO_Init+0x1f8>
 8000b86:	2301      	movs	r3, #1
 8000b88:	e000      	b.n	8000b8c <HAL_GPIO_Init+0x1f8>
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	697a      	ldr	r2, [r7, #20]
 8000b8e:	2103      	movs	r1, #3
 8000b90:	400a      	ands	r2, r1
 8000b92:	0092      	lsls	r2, r2, #2
 8000b94:	4093      	lsls	r3, r2
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b9c:	4935      	ldr	r1, [pc, #212]	; (8000c74 <HAL_GPIO_Init+0x2e0>)
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	089b      	lsrs	r3, r3, #2
 8000ba2:	3302      	adds	r3, #2
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000baa:	4b38      	ldr	r3, [pc, #224]	; (8000c8c <HAL_GPIO_Init+0x2f8>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	43da      	mvns	r2, r3
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685a      	ldr	r2, [r3, #4]
 8000bbe:	2380      	movs	r3, #128	; 0x80
 8000bc0:	025b      	lsls	r3, r3, #9
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	d003      	beq.n	8000bce <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bce:	4b2f      	ldr	r3, [pc, #188]	; (8000c8c <HAL_GPIO_Init+0x2f8>)
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000bd4:	4b2d      	ldr	r3, [pc, #180]	; (8000c8c <HAL_GPIO_Init+0x2f8>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	43da      	mvns	r2, r3
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	4013      	ands	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685a      	ldr	r2, [r3, #4]
 8000be8:	2380      	movs	r3, #128	; 0x80
 8000bea:	029b      	lsls	r3, r3, #10
 8000bec:	4013      	ands	r3, r2
 8000bee:	d003      	beq.n	8000bf8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bf8:	4b24      	ldr	r3, [pc, #144]	; (8000c8c <HAL_GPIO_Init+0x2f8>)
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bfe:	4b23      	ldr	r3, [pc, #140]	; (8000c8c <HAL_GPIO_Init+0x2f8>)
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	43da      	mvns	r2, r3
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685a      	ldr	r2, [r3, #4]
 8000c12:	2380      	movs	r3, #128	; 0x80
 8000c14:	035b      	lsls	r3, r3, #13
 8000c16:	4013      	ands	r3, r2
 8000c18:	d003      	beq.n	8000c22 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c22:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <HAL_GPIO_Init+0x2f8>)
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c28:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <HAL_GPIO_Init+0x2f8>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	43da      	mvns	r2, r3
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	4013      	ands	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685a      	ldr	r2, [r3, #4]
 8000c3c:	2380      	movs	r3, #128	; 0x80
 8000c3e:	039b      	lsls	r3, r3, #14
 8000c40:	4013      	ands	r3, r2
 8000c42:	d003      	beq.n	8000c4c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <HAL_GPIO_Init+0x2f8>)
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	3301      	adds	r3, #1
 8000c56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	40da      	lsrs	r2, r3
 8000c60:	1e13      	subs	r3, r2, #0
 8000c62:	d000      	beq.n	8000c66 <HAL_GPIO_Init+0x2d2>
 8000c64:	e6a2      	b.n	80009ac <HAL_GPIO_Init+0x18>
  }
}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	46c0      	nop			; (mov r8, r8)
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	b006      	add	sp, #24
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40021000 	.word	0x40021000
 8000c74:	40010000 	.word	0x40010000
 8000c78:	50000400 	.word	0x50000400
 8000c7c:	50000800 	.word	0x50000800
 8000c80:	50000c00 	.word	0x50000c00
 8000c84:	50001000 	.word	0x50001000
 8000c88:	50001c00 	.word	0x50001c00
 8000c8c:	40010400 	.word	0x40010400

08000c90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c90:	b5b0      	push	{r4, r5, r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d102      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	f000 fbbf 	bl	8001422 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ca4:	4bc9      	ldr	r3, [pc, #804]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	220c      	movs	r2, #12
 8000caa:	4013      	ands	r3, r2
 8000cac:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cae:	4bc7      	ldr	r3, [pc, #796]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000cb0:	68da      	ldr	r2, [r3, #12]
 8000cb2:	2380      	movs	r3, #128	; 0x80
 8000cb4:	025b      	lsls	r3, r3, #9
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	d100      	bne.n	8000cc6 <HAL_RCC_OscConfig+0x36>
 8000cc4:	e07e      	b.n	8000dc4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	2b08      	cmp	r3, #8
 8000cca:	d007      	beq.n	8000cdc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	2b0c      	cmp	r3, #12
 8000cd0:	d112      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x68>
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	2380      	movs	r3, #128	; 0x80
 8000cd6:	025b      	lsls	r3, r3, #9
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d10d      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cdc:	4bbb      	ldr	r3, [pc, #748]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	2380      	movs	r3, #128	; 0x80
 8000ce2:	029b      	lsls	r3, r3, #10
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	d100      	bne.n	8000cea <HAL_RCC_OscConfig+0x5a>
 8000ce8:	e06b      	b.n	8000dc2 <HAL_RCC_OscConfig+0x132>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d167      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	f000 fb95 	bl	8001422 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685a      	ldr	r2, [r3, #4]
 8000cfc:	2380      	movs	r3, #128	; 0x80
 8000cfe:	025b      	lsls	r3, r3, #9
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d107      	bne.n	8000d14 <HAL_RCC_OscConfig+0x84>
 8000d04:	4bb1      	ldr	r3, [pc, #708]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4bb0      	ldr	r3, [pc, #704]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000d0a:	2180      	movs	r1, #128	; 0x80
 8000d0c:	0249      	lsls	r1, r1, #9
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	e027      	b.n	8000d64 <HAL_RCC_OscConfig+0xd4>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685a      	ldr	r2, [r3, #4]
 8000d18:	23a0      	movs	r3, #160	; 0xa0
 8000d1a:	02db      	lsls	r3, r3, #11
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d10e      	bne.n	8000d3e <HAL_RCC_OscConfig+0xae>
 8000d20:	4baa      	ldr	r3, [pc, #680]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4ba9      	ldr	r3, [pc, #676]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000d26:	2180      	movs	r1, #128	; 0x80
 8000d28:	02c9      	lsls	r1, r1, #11
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	4ba7      	ldr	r3, [pc, #668]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	4ba6      	ldr	r3, [pc, #664]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000d34:	2180      	movs	r1, #128	; 0x80
 8000d36:	0249      	lsls	r1, r1, #9
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	e012      	b.n	8000d64 <HAL_RCC_OscConfig+0xd4>
 8000d3e:	4ba3      	ldr	r3, [pc, #652]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	4ba2      	ldr	r3, [pc, #648]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000d44:	49a2      	ldr	r1, [pc, #648]	; (8000fd0 <HAL_RCC_OscConfig+0x340>)
 8000d46:	400a      	ands	r2, r1
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	4ba0      	ldr	r3, [pc, #640]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	2380      	movs	r3, #128	; 0x80
 8000d50:	025b      	lsls	r3, r3, #9
 8000d52:	4013      	ands	r3, r2
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	4b9c      	ldr	r3, [pc, #624]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b9b      	ldr	r3, [pc, #620]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000d5e:	499d      	ldr	r1, [pc, #628]	; (8000fd4 <HAL_RCC_OscConfig+0x344>)
 8000d60:	400a      	ands	r2, r1
 8000d62:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d015      	beq.n	8000d98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d6c:	f7ff fd54 	bl	8000818 <HAL_GetTick>
 8000d70:	0003      	movs	r3, r0
 8000d72:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d74:	e009      	b.n	8000d8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d76:	f7ff fd4f 	bl	8000818 <HAL_GetTick>
 8000d7a:	0002      	movs	r2, r0
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	2b64      	cmp	r3, #100	; 0x64
 8000d82:	d902      	bls.n	8000d8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d84:	2303      	movs	r3, #3
 8000d86:	f000 fb4c 	bl	8001422 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d8a:	4b90      	ldr	r3, [pc, #576]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	2380      	movs	r3, #128	; 0x80
 8000d90:	029b      	lsls	r3, r3, #10
 8000d92:	4013      	ands	r3, r2
 8000d94:	d0ef      	beq.n	8000d76 <HAL_RCC_OscConfig+0xe6>
 8000d96:	e015      	b.n	8000dc4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d98:	f7ff fd3e 	bl	8000818 <HAL_GetTick>
 8000d9c:	0003      	movs	r3, r0
 8000d9e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000da0:	e008      	b.n	8000db4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000da2:	f7ff fd39 	bl	8000818 <HAL_GetTick>
 8000da6:	0002      	movs	r2, r0
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	2b64      	cmp	r3, #100	; 0x64
 8000dae:	d901      	bls.n	8000db4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000db0:	2303      	movs	r3, #3
 8000db2:	e336      	b.n	8001422 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000db4:	4b85      	ldr	r3, [pc, #532]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	2380      	movs	r3, #128	; 0x80
 8000dba:	029b      	lsls	r3, r3, #10
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	d1f0      	bne.n	8000da2 <HAL_RCC_OscConfig+0x112>
 8000dc0:	e000      	b.n	8000dc4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dc2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2202      	movs	r2, #2
 8000dca:	4013      	ands	r3, r2
 8000dcc:	d100      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x140>
 8000dce:	e099      	b.n	8000f04 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd8:	2220      	movs	r2, #32
 8000dda:	4013      	ands	r3, r2
 8000ddc:	d009      	beq.n	8000df2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000dde:	4b7b      	ldr	r3, [pc, #492]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	4b7a      	ldr	r3, [pc, #488]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000de4:	2120      	movs	r1, #32
 8000de6:	430a      	orrs	r2, r1
 8000de8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dec:	2220      	movs	r2, #32
 8000dee:	4393      	bics	r3, r2
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	2b04      	cmp	r3, #4
 8000df6:	d005      	beq.n	8000e04 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	2b0c      	cmp	r3, #12
 8000dfc:	d13e      	bne.n	8000e7c <HAL_RCC_OscConfig+0x1ec>
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d13b      	bne.n	8000e7c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000e04:	4b71      	ldr	r3, [pc, #452]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2204      	movs	r2, #4
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	d004      	beq.n	8000e18 <HAL_RCC_OscConfig+0x188>
 8000e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d101      	bne.n	8000e18 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	e304      	b.n	8001422 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e18:	4b6c      	ldr	r3, [pc, #432]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	4a6e      	ldr	r2, [pc, #440]	; (8000fd8 <HAL_RCC_OscConfig+0x348>)
 8000e1e:	4013      	ands	r3, r2
 8000e20:	0019      	movs	r1, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	691b      	ldr	r3, [r3, #16]
 8000e26:	021a      	lsls	r2, r3, #8
 8000e28:	4b68      	ldr	r3, [pc, #416]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000e2e:	4b67      	ldr	r3, [pc, #412]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2209      	movs	r2, #9
 8000e34:	4393      	bics	r3, r2
 8000e36:	0019      	movs	r1, r3
 8000e38:	4b64      	ldr	r3, [pc, #400]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e40:	f000 fc42 	bl	80016c8 <HAL_RCC_GetSysClockFreq>
 8000e44:	0001      	movs	r1, r0
 8000e46:	4b61      	ldr	r3, [pc, #388]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	091b      	lsrs	r3, r3, #4
 8000e4c:	220f      	movs	r2, #15
 8000e4e:	4013      	ands	r3, r2
 8000e50:	4a62      	ldr	r2, [pc, #392]	; (8000fdc <HAL_RCC_OscConfig+0x34c>)
 8000e52:	5cd3      	ldrb	r3, [r2, r3]
 8000e54:	000a      	movs	r2, r1
 8000e56:	40da      	lsrs	r2, r3
 8000e58:	4b61      	ldr	r3, [pc, #388]	; (8000fe0 <HAL_RCC_OscConfig+0x350>)
 8000e5a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8000e5c:	4b61      	ldr	r3, [pc, #388]	; (8000fe4 <HAL_RCC_OscConfig+0x354>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2513      	movs	r5, #19
 8000e62:	197c      	adds	r4, r7, r5
 8000e64:	0018      	movs	r0, r3
 8000e66:	f7ff fc91 	bl	800078c <HAL_InitTick>
 8000e6a:	0003      	movs	r3, r0
 8000e6c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000e6e:	197b      	adds	r3, r7, r5
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d046      	beq.n	8000f04 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8000e76:	197b      	adds	r3, r7, r5
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	e2d2      	b.n	8001422 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d027      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000e82:	4b52      	ldr	r3, [pc, #328]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2209      	movs	r2, #9
 8000e88:	4393      	bics	r3, r2
 8000e8a:	0019      	movs	r1, r3
 8000e8c:	4b4f      	ldr	r3, [pc, #316]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e90:	430a      	orrs	r2, r1
 8000e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e94:	f7ff fcc0 	bl	8000818 <HAL_GetTick>
 8000e98:	0003      	movs	r3, r0
 8000e9a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e9c:	e008      	b.n	8000eb0 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e9e:	f7ff fcbb 	bl	8000818 <HAL_GetTick>
 8000ea2:	0002      	movs	r2, r0
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d901      	bls.n	8000eb0 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8000eac:	2303      	movs	r3, #3
 8000eae:	e2b8      	b.n	8001422 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000eb0:	4b46      	ldr	r3, [pc, #280]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2204      	movs	r2, #4
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	d0f1      	beq.n	8000e9e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eba:	4b44      	ldr	r3, [pc, #272]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	4a46      	ldr	r2, [pc, #280]	; (8000fd8 <HAL_RCC_OscConfig+0x348>)
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	0019      	movs	r1, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	691b      	ldr	r3, [r3, #16]
 8000ec8:	021a      	lsls	r2, r3, #8
 8000eca:	4b40      	ldr	r3, [pc, #256]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	e018      	b.n	8000f04 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ed2:	4b3e      	ldr	r3, [pc, #248]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	4b3d      	ldr	r3, [pc, #244]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000ed8:	2101      	movs	r1, #1
 8000eda:	438a      	bics	r2, r1
 8000edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ede:	f7ff fc9b 	bl	8000818 <HAL_GetTick>
 8000ee2:	0003      	movs	r3, r0
 8000ee4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000ee6:	e008      	b.n	8000efa <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ee8:	f7ff fc96 	bl	8000818 <HAL_GetTick>
 8000eec:	0002      	movs	r2, r0
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d901      	bls.n	8000efa <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e293      	b.n	8001422 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000efa:	4b34      	ldr	r3, [pc, #208]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2204      	movs	r2, #4
 8000f00:	4013      	ands	r3, r2
 8000f02:	d1f1      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2210      	movs	r2, #16
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	d100      	bne.n	8000f10 <HAL_RCC_OscConfig+0x280>
 8000f0e:	e0a2      	b.n	8001056 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d140      	bne.n	8000f98 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f16:	4b2d      	ldr	r3, [pc, #180]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	2380      	movs	r3, #128	; 0x80
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	4013      	ands	r3, r2
 8000f20:	d005      	beq.n	8000f2e <HAL_RCC_OscConfig+0x29e>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d101      	bne.n	8000f2e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e279      	b.n	8001422 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f2e:	4b27      	ldr	r3, [pc, #156]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	4a2d      	ldr	r2, [pc, #180]	; (8000fe8 <HAL_RCC_OscConfig+0x358>)
 8000f34:	4013      	ands	r3, r2
 8000f36:	0019      	movs	r1, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f3c:	4b23      	ldr	r3, [pc, #140]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f42:	4b22      	ldr	r3, [pc, #136]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	021b      	lsls	r3, r3, #8
 8000f48:	0a19      	lsrs	r1, r3, #8
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6a1b      	ldr	r3, [r3, #32]
 8000f4e:	061a      	lsls	r2, r3, #24
 8000f50:	4b1e      	ldr	r3, [pc, #120]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000f52:	430a      	orrs	r2, r1
 8000f54:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5a:	0b5b      	lsrs	r3, r3, #13
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	2280      	movs	r2, #128	; 0x80
 8000f60:	0212      	lsls	r2, r2, #8
 8000f62:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000f64:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	091b      	lsrs	r3, r3, #4
 8000f6a:	210f      	movs	r1, #15
 8000f6c:	400b      	ands	r3, r1
 8000f6e:	491b      	ldr	r1, [pc, #108]	; (8000fdc <HAL_RCC_OscConfig+0x34c>)
 8000f70:	5ccb      	ldrb	r3, [r1, r3]
 8000f72:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f74:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <HAL_RCC_OscConfig+0x350>)
 8000f76:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8000f78:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <HAL_RCC_OscConfig+0x354>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2513      	movs	r5, #19
 8000f7e:	197c      	adds	r4, r7, r5
 8000f80:	0018      	movs	r0, r3
 8000f82:	f7ff fc03 	bl	800078c <HAL_InitTick>
 8000f86:	0003      	movs	r3, r0
 8000f88:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8000f8a:	197b      	adds	r3, r7, r5
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d061      	beq.n	8001056 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8000f92:	197b      	adds	r3, r7, r5
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	e244      	b.n	8001422 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	69db      	ldr	r3, [r3, #28]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d040      	beq.n	8001022 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000fa6:	2180      	movs	r1, #128	; 0x80
 8000fa8:	0049      	lsls	r1, r1, #1
 8000faa:	430a      	orrs	r2, r1
 8000fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fae:	f7ff fc33 	bl	8000818 <HAL_GetTick>
 8000fb2:	0003      	movs	r3, r0
 8000fb4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000fb6:	e019      	b.n	8000fec <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fb8:	f7ff fc2e 	bl	8000818 <HAL_GetTick>
 8000fbc:	0002      	movs	r2, r0
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d912      	bls.n	8000fec <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e22b      	b.n	8001422 <HAL_RCC_OscConfig+0x792>
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	fffeffff 	.word	0xfffeffff
 8000fd4:	fffbffff 	.word	0xfffbffff
 8000fd8:	ffffe0ff 	.word	0xffffe0ff
 8000fdc:	080019ac 	.word	0x080019ac
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	20000004 	.word	0x20000004
 8000fe8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000fec:	4bca      	ldr	r3, [pc, #808]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	d0df      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ff8:	4bc7      	ldr	r3, [pc, #796]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	4ac7      	ldr	r2, [pc, #796]	; (800131c <HAL_RCC_OscConfig+0x68c>)
 8000ffe:	4013      	ands	r3, r2
 8001000:	0019      	movs	r1, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001006:	4bc4      	ldr	r3, [pc, #784]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 8001008:	430a      	orrs	r2, r1
 800100a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800100c:	4bc2      	ldr	r3, [pc, #776]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	021b      	lsls	r3, r3, #8
 8001012:	0a19      	lsrs	r1, r3, #8
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a1b      	ldr	r3, [r3, #32]
 8001018:	061a      	lsls	r2, r3, #24
 800101a:	4bbf      	ldr	r3, [pc, #764]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 800101c:	430a      	orrs	r2, r1
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	e019      	b.n	8001056 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001022:	4bbd      	ldr	r3, [pc, #756]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	4bbc      	ldr	r3, [pc, #752]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 8001028:	49bd      	ldr	r1, [pc, #756]	; (8001320 <HAL_RCC_OscConfig+0x690>)
 800102a:	400a      	ands	r2, r1
 800102c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102e:	f7ff fbf3 	bl	8000818 <HAL_GetTick>
 8001032:	0003      	movs	r3, r0
 8001034:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001036:	e008      	b.n	800104a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001038:	f7ff fbee 	bl	8000818 <HAL_GetTick>
 800103c:	0002      	movs	r2, r0
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b02      	cmp	r3, #2
 8001044:	d901      	bls.n	800104a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e1eb      	b.n	8001422 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800104a:	4bb3      	ldr	r3, [pc, #716]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	2380      	movs	r3, #128	; 0x80
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4013      	ands	r3, r2
 8001054:	d1f0      	bne.n	8001038 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2208      	movs	r2, #8
 800105c:	4013      	ands	r3, r2
 800105e:	d036      	beq.n	80010ce <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	695b      	ldr	r3, [r3, #20]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d019      	beq.n	800109c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001068:	4bab      	ldr	r3, [pc, #684]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 800106a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800106c:	4baa      	ldr	r3, [pc, #680]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 800106e:	2101      	movs	r1, #1
 8001070:	430a      	orrs	r2, r1
 8001072:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001074:	f7ff fbd0 	bl	8000818 <HAL_GetTick>
 8001078:	0003      	movs	r3, r0
 800107a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800107c:	e008      	b.n	8001090 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800107e:	f7ff fbcb 	bl	8000818 <HAL_GetTick>
 8001082:	0002      	movs	r2, r0
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d901      	bls.n	8001090 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e1c8      	b.n	8001422 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001090:	4ba1      	ldr	r3, [pc, #644]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 8001092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001094:	2202      	movs	r2, #2
 8001096:	4013      	ands	r3, r2
 8001098:	d0f1      	beq.n	800107e <HAL_RCC_OscConfig+0x3ee>
 800109a:	e018      	b.n	80010ce <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800109c:	4b9e      	ldr	r3, [pc, #632]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 800109e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010a0:	4b9d      	ldr	r3, [pc, #628]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 80010a2:	2101      	movs	r1, #1
 80010a4:	438a      	bics	r2, r1
 80010a6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a8:	f7ff fbb6 	bl	8000818 <HAL_GetTick>
 80010ac:	0003      	movs	r3, r0
 80010ae:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80010b0:	e008      	b.n	80010c4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010b2:	f7ff fbb1 	bl	8000818 <HAL_GetTick>
 80010b6:	0002      	movs	r2, r0
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d901      	bls.n	80010c4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80010c0:	2303      	movs	r3, #3
 80010c2:	e1ae      	b.n	8001422 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80010c4:	4b94      	ldr	r3, [pc, #592]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 80010c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010c8:	2202      	movs	r2, #2
 80010ca:	4013      	ands	r3, r2
 80010cc:	d1f1      	bne.n	80010b2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2204      	movs	r2, #4
 80010d4:	4013      	ands	r3, r2
 80010d6:	d100      	bne.n	80010da <HAL_RCC_OscConfig+0x44a>
 80010d8:	e0ae      	b.n	8001238 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010da:	2023      	movs	r0, #35	; 0x23
 80010dc:	183b      	adds	r3, r7, r0
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010e2:	4b8d      	ldr	r3, [pc, #564]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 80010e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010e6:	2380      	movs	r3, #128	; 0x80
 80010e8:	055b      	lsls	r3, r3, #21
 80010ea:	4013      	ands	r3, r2
 80010ec:	d109      	bne.n	8001102 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ee:	4b8a      	ldr	r3, [pc, #552]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 80010f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010f2:	4b89      	ldr	r3, [pc, #548]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 80010f4:	2180      	movs	r1, #128	; 0x80
 80010f6:	0549      	lsls	r1, r1, #21
 80010f8:	430a      	orrs	r2, r1
 80010fa:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80010fc:	183b      	adds	r3, r7, r0
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001102:	4b88      	ldr	r3, [pc, #544]	; (8001324 <HAL_RCC_OscConfig+0x694>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	4013      	ands	r3, r2
 800110c:	d11a      	bne.n	8001144 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800110e:	4b85      	ldr	r3, [pc, #532]	; (8001324 <HAL_RCC_OscConfig+0x694>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	4b84      	ldr	r3, [pc, #528]	; (8001324 <HAL_RCC_OscConfig+0x694>)
 8001114:	2180      	movs	r1, #128	; 0x80
 8001116:	0049      	lsls	r1, r1, #1
 8001118:	430a      	orrs	r2, r1
 800111a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800111c:	f7ff fb7c 	bl	8000818 <HAL_GetTick>
 8001120:	0003      	movs	r3, r0
 8001122:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001124:	e008      	b.n	8001138 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001126:	f7ff fb77 	bl	8000818 <HAL_GetTick>
 800112a:	0002      	movs	r2, r0
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b64      	cmp	r3, #100	; 0x64
 8001132:	d901      	bls.n	8001138 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	e174      	b.n	8001422 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001138:	4b7a      	ldr	r3, [pc, #488]	; (8001324 <HAL_RCC_OscConfig+0x694>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4013      	ands	r3, r2
 8001142:	d0f0      	beq.n	8001126 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	2380      	movs	r3, #128	; 0x80
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	429a      	cmp	r2, r3
 800114e:	d107      	bne.n	8001160 <HAL_RCC_OscConfig+0x4d0>
 8001150:	4b71      	ldr	r3, [pc, #452]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 8001152:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001154:	4b70      	ldr	r3, [pc, #448]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 8001156:	2180      	movs	r1, #128	; 0x80
 8001158:	0049      	lsls	r1, r1, #1
 800115a:	430a      	orrs	r2, r1
 800115c:	651a      	str	r2, [r3, #80]	; 0x50
 800115e:	e031      	b.n	80011c4 <HAL_RCC_OscConfig+0x534>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d10c      	bne.n	8001182 <HAL_RCC_OscConfig+0x4f2>
 8001168:	4b6b      	ldr	r3, [pc, #428]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 800116a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800116c:	4b6a      	ldr	r3, [pc, #424]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 800116e:	496c      	ldr	r1, [pc, #432]	; (8001320 <HAL_RCC_OscConfig+0x690>)
 8001170:	400a      	ands	r2, r1
 8001172:	651a      	str	r2, [r3, #80]	; 0x50
 8001174:	4b68      	ldr	r3, [pc, #416]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 8001176:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001178:	4b67      	ldr	r3, [pc, #412]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 800117a:	496b      	ldr	r1, [pc, #428]	; (8001328 <HAL_RCC_OscConfig+0x698>)
 800117c:	400a      	ands	r2, r1
 800117e:	651a      	str	r2, [r3, #80]	; 0x50
 8001180:	e020      	b.n	80011c4 <HAL_RCC_OscConfig+0x534>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	23a0      	movs	r3, #160	; 0xa0
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	429a      	cmp	r2, r3
 800118c:	d10e      	bne.n	80011ac <HAL_RCC_OscConfig+0x51c>
 800118e:	4b62      	ldr	r3, [pc, #392]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 8001190:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001192:	4b61      	ldr	r3, [pc, #388]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 8001194:	2180      	movs	r1, #128	; 0x80
 8001196:	00c9      	lsls	r1, r1, #3
 8001198:	430a      	orrs	r2, r1
 800119a:	651a      	str	r2, [r3, #80]	; 0x50
 800119c:	4b5e      	ldr	r3, [pc, #376]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 800119e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011a0:	4b5d      	ldr	r3, [pc, #372]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 80011a2:	2180      	movs	r1, #128	; 0x80
 80011a4:	0049      	lsls	r1, r1, #1
 80011a6:	430a      	orrs	r2, r1
 80011a8:	651a      	str	r2, [r3, #80]	; 0x50
 80011aa:	e00b      	b.n	80011c4 <HAL_RCC_OscConfig+0x534>
 80011ac:	4b5a      	ldr	r3, [pc, #360]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 80011ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011b0:	4b59      	ldr	r3, [pc, #356]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 80011b2:	495b      	ldr	r1, [pc, #364]	; (8001320 <HAL_RCC_OscConfig+0x690>)
 80011b4:	400a      	ands	r2, r1
 80011b6:	651a      	str	r2, [r3, #80]	; 0x50
 80011b8:	4b57      	ldr	r3, [pc, #348]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 80011ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011bc:	4b56      	ldr	r3, [pc, #344]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 80011be:	495a      	ldr	r1, [pc, #360]	; (8001328 <HAL_RCC_OscConfig+0x698>)
 80011c0:	400a      	ands	r2, r1
 80011c2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d015      	beq.n	80011f8 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011cc:	f7ff fb24 	bl	8000818 <HAL_GetTick>
 80011d0:	0003      	movs	r3, r0
 80011d2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80011d4:	e009      	b.n	80011ea <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011d6:	f7ff fb1f 	bl	8000818 <HAL_GetTick>
 80011da:	0002      	movs	r2, r0
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	4a52      	ldr	r2, [pc, #328]	; (800132c <HAL_RCC_OscConfig+0x69c>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e11b      	b.n	8001422 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80011ea:	4b4b      	ldr	r3, [pc, #300]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 80011ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011ee:	2380      	movs	r3, #128	; 0x80
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4013      	ands	r3, r2
 80011f4:	d0ef      	beq.n	80011d6 <HAL_RCC_OscConfig+0x546>
 80011f6:	e014      	b.n	8001222 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f8:	f7ff fb0e 	bl	8000818 <HAL_GetTick>
 80011fc:	0003      	movs	r3, r0
 80011fe:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001200:	e009      	b.n	8001216 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001202:	f7ff fb09 	bl	8000818 <HAL_GetTick>
 8001206:	0002      	movs	r2, r0
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	4a47      	ldr	r2, [pc, #284]	; (800132c <HAL_RCC_OscConfig+0x69c>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e105      	b.n	8001422 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001216:	4b40      	ldr	r3, [pc, #256]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 8001218:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4013      	ands	r3, r2
 8001220:	d1ef      	bne.n	8001202 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001222:	2323      	movs	r3, #35	; 0x23
 8001224:	18fb      	adds	r3, r7, r3
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d105      	bne.n	8001238 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800122c:	4b3a      	ldr	r3, [pc, #232]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 800122e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001230:	4b39      	ldr	r3, [pc, #228]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 8001232:	493f      	ldr	r1, [pc, #252]	; (8001330 <HAL_RCC_OscConfig+0x6a0>)
 8001234:	400a      	ands	r2, r1
 8001236:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2220      	movs	r2, #32
 800123e:	4013      	ands	r3, r2
 8001240:	d049      	beq.n	80012d6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d026      	beq.n	8001298 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800124a:	4b33      	ldr	r3, [pc, #204]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	4b32      	ldr	r3, [pc, #200]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 8001250:	2101      	movs	r1, #1
 8001252:	430a      	orrs	r2, r1
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	4b30      	ldr	r3, [pc, #192]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 8001258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800125a:	4b2f      	ldr	r3, [pc, #188]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 800125c:	2101      	movs	r1, #1
 800125e:	430a      	orrs	r2, r1
 8001260:	635a      	str	r2, [r3, #52]	; 0x34
 8001262:	4b34      	ldr	r3, [pc, #208]	; (8001334 <HAL_RCC_OscConfig+0x6a4>)
 8001264:	6a1a      	ldr	r2, [r3, #32]
 8001266:	4b33      	ldr	r3, [pc, #204]	; (8001334 <HAL_RCC_OscConfig+0x6a4>)
 8001268:	2180      	movs	r1, #128	; 0x80
 800126a:	0189      	lsls	r1, r1, #6
 800126c:	430a      	orrs	r2, r1
 800126e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001270:	f7ff fad2 	bl	8000818 <HAL_GetTick>
 8001274:	0003      	movs	r3, r0
 8001276:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800127a:	f7ff facd 	bl	8000818 <HAL_GetTick>
 800127e:	0002      	movs	r2, r0
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e0ca      	b.n	8001422 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800128c:	4b22      	ldr	r3, [pc, #136]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	2202      	movs	r2, #2
 8001292:	4013      	ands	r3, r2
 8001294:	d0f1      	beq.n	800127a <HAL_RCC_OscConfig+0x5ea>
 8001296:	e01e      	b.n	80012d6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001298:	4b1f      	ldr	r3, [pc, #124]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	4b1e      	ldr	r3, [pc, #120]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 800129e:	2101      	movs	r1, #1
 80012a0:	438a      	bics	r2, r1
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	4b23      	ldr	r3, [pc, #140]	; (8001334 <HAL_RCC_OscConfig+0x6a4>)
 80012a6:	6a1a      	ldr	r2, [r3, #32]
 80012a8:	4b22      	ldr	r3, [pc, #136]	; (8001334 <HAL_RCC_OscConfig+0x6a4>)
 80012aa:	4923      	ldr	r1, [pc, #140]	; (8001338 <HAL_RCC_OscConfig+0x6a8>)
 80012ac:	400a      	ands	r2, r1
 80012ae:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b0:	f7ff fab2 	bl	8000818 <HAL_GetTick>
 80012b4:	0003      	movs	r3, r0
 80012b6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80012b8:	e008      	b.n	80012cc <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012ba:	f7ff faad 	bl	8000818 <HAL_GetTick>
 80012be:	0002      	movs	r2, r0
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e0aa      	b.n	8001422 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	2202      	movs	r2, #2
 80012d2:	4013      	ands	r3, r2
 80012d4:	d1f1      	bne.n	80012ba <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d100      	bne.n	80012e0 <HAL_RCC_OscConfig+0x650>
 80012de:	e09f      	b.n	8001420 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	2b0c      	cmp	r3, #12
 80012e4:	d100      	bne.n	80012e8 <HAL_RCC_OscConfig+0x658>
 80012e6:	e078      	b.n	80013da <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d159      	bne.n	80013a4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 80012f6:	4911      	ldr	r1, [pc, #68]	; (800133c <HAL_RCC_OscConfig+0x6ac>)
 80012f8:	400a      	ands	r2, r1
 80012fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fa8c 	bl	8000818 <HAL_GetTick>
 8001300:	0003      	movs	r3, r0
 8001302:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001304:	e01c      	b.n	8001340 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001306:	f7ff fa87 	bl	8000818 <HAL_GetTick>
 800130a:	0002      	movs	r2, r0
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d915      	bls.n	8001340 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e084      	b.n	8001422 <HAL_RCC_OscConfig+0x792>
 8001318:	40021000 	.word	0x40021000
 800131c:	ffff1fff 	.word	0xffff1fff
 8001320:	fffffeff 	.word	0xfffffeff
 8001324:	40007000 	.word	0x40007000
 8001328:	fffffbff 	.word	0xfffffbff
 800132c:	00001388 	.word	0x00001388
 8001330:	efffffff 	.word	0xefffffff
 8001334:	40010000 	.word	0x40010000
 8001338:	ffffdfff 	.word	0xffffdfff
 800133c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001340:	4b3a      	ldr	r3, [pc, #232]	; (800142c <HAL_RCC_OscConfig+0x79c>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	049b      	lsls	r3, r3, #18
 8001348:	4013      	ands	r3, r2
 800134a:	d1dc      	bne.n	8001306 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800134c:	4b37      	ldr	r3, [pc, #220]	; (800142c <HAL_RCC_OscConfig+0x79c>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	4a37      	ldr	r2, [pc, #220]	; (8001430 <HAL_RCC_OscConfig+0x7a0>)
 8001352:	4013      	ands	r3, r2
 8001354:	0019      	movs	r1, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	431a      	orrs	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001364:	431a      	orrs	r2, r3
 8001366:	4b31      	ldr	r3, [pc, #196]	; (800142c <HAL_RCC_OscConfig+0x79c>)
 8001368:	430a      	orrs	r2, r1
 800136a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800136c:	4b2f      	ldr	r3, [pc, #188]	; (800142c <HAL_RCC_OscConfig+0x79c>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b2e      	ldr	r3, [pc, #184]	; (800142c <HAL_RCC_OscConfig+0x79c>)
 8001372:	2180      	movs	r1, #128	; 0x80
 8001374:	0449      	lsls	r1, r1, #17
 8001376:	430a      	orrs	r2, r1
 8001378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137a:	f7ff fa4d 	bl	8000818 <HAL_GetTick>
 800137e:	0003      	movs	r3, r0
 8001380:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001384:	f7ff fa48 	bl	8000818 <HAL_GetTick>
 8001388:	0002      	movs	r2, r0
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e045      	b.n	8001422 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001396:	4b25      	ldr	r3, [pc, #148]	; (800142c <HAL_RCC_OscConfig+0x79c>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	2380      	movs	r3, #128	; 0x80
 800139c:	049b      	lsls	r3, r3, #18
 800139e:	4013      	ands	r3, r2
 80013a0:	d0f0      	beq.n	8001384 <HAL_RCC_OscConfig+0x6f4>
 80013a2:	e03d      	b.n	8001420 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013a4:	4b21      	ldr	r3, [pc, #132]	; (800142c <HAL_RCC_OscConfig+0x79c>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b20      	ldr	r3, [pc, #128]	; (800142c <HAL_RCC_OscConfig+0x79c>)
 80013aa:	4922      	ldr	r1, [pc, #136]	; (8001434 <HAL_RCC_OscConfig+0x7a4>)
 80013ac:	400a      	ands	r2, r1
 80013ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b0:	f7ff fa32 	bl	8000818 <HAL_GetTick>
 80013b4:	0003      	movs	r3, r0
 80013b6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ba:	f7ff fa2d 	bl	8000818 <HAL_GetTick>
 80013be:	0002      	movs	r2, r0
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e02a      	b.n	8001422 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80013cc:	4b17      	ldr	r3, [pc, #92]	; (800142c <HAL_RCC_OscConfig+0x79c>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	2380      	movs	r3, #128	; 0x80
 80013d2:	049b      	lsls	r3, r3, #18
 80013d4:	4013      	ands	r3, r2
 80013d6:	d1f0      	bne.n	80013ba <HAL_RCC_OscConfig+0x72a>
 80013d8:	e022      	b.n	8001420 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d101      	bne.n	80013e6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e01d      	b.n	8001422 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <HAL_RCC_OscConfig+0x79c>)
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	2380      	movs	r3, #128	; 0x80
 80013f0:	025b      	lsls	r3, r3, #9
 80013f2:	401a      	ands	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d10f      	bne.n	800141c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	23f0      	movs	r3, #240	; 0xf0
 8001400:	039b      	lsls	r3, r3, #14
 8001402:	401a      	ands	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001408:	429a      	cmp	r2, r3
 800140a:	d107      	bne.n	800141c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	23c0      	movs	r3, #192	; 0xc0
 8001410:	041b      	lsls	r3, r3, #16
 8001412:	401a      	ands	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001418:	429a      	cmp	r2, r3
 800141a:	d001      	beq.n	8001420 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e000      	b.n	8001422 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	0018      	movs	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	b00a      	add	sp, #40	; 0x28
 8001428:	bdb0      	pop	{r4, r5, r7, pc}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	40021000 	.word	0x40021000
 8001430:	ff02ffff 	.word	0xff02ffff
 8001434:	feffffff 	.word	0xfeffffff

08001438 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001438:	b5b0      	push	{r4, r5, r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d101      	bne.n	800144c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e128      	b.n	800169e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800144c:	4b96      	ldr	r3, [pc, #600]	; (80016a8 <HAL_RCC_ClockConfig+0x270>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2201      	movs	r2, #1
 8001452:	4013      	ands	r3, r2
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	429a      	cmp	r2, r3
 8001458:	d91e      	bls.n	8001498 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800145a:	4b93      	ldr	r3, [pc, #588]	; (80016a8 <HAL_RCC_ClockConfig+0x270>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2201      	movs	r2, #1
 8001460:	4393      	bics	r3, r2
 8001462:	0019      	movs	r1, r3
 8001464:	4b90      	ldr	r3, [pc, #576]	; (80016a8 <HAL_RCC_ClockConfig+0x270>)
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	430a      	orrs	r2, r1
 800146a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800146c:	f7ff f9d4 	bl	8000818 <HAL_GetTick>
 8001470:	0003      	movs	r3, r0
 8001472:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001474:	e009      	b.n	800148a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001476:	f7ff f9cf 	bl	8000818 <HAL_GetTick>
 800147a:	0002      	movs	r2, r0
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	4a8a      	ldr	r2, [pc, #552]	; (80016ac <HAL_RCC_ClockConfig+0x274>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d901      	bls.n	800148a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e109      	b.n	800169e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800148a:	4b87      	ldr	r3, [pc, #540]	; (80016a8 <HAL_RCC_ClockConfig+0x270>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2201      	movs	r2, #1
 8001490:	4013      	ands	r3, r2
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	429a      	cmp	r2, r3
 8001496:	d1ee      	bne.n	8001476 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2202      	movs	r2, #2
 800149e:	4013      	ands	r3, r2
 80014a0:	d009      	beq.n	80014b6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014a2:	4b83      	ldr	r3, [pc, #524]	; (80016b0 <HAL_RCC_ClockConfig+0x278>)
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	22f0      	movs	r2, #240	; 0xf0
 80014a8:	4393      	bics	r3, r2
 80014aa:	0019      	movs	r1, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	4b7f      	ldr	r3, [pc, #508]	; (80016b0 <HAL_RCC_ClockConfig+0x278>)
 80014b2:	430a      	orrs	r2, r1
 80014b4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2201      	movs	r2, #1
 80014bc:	4013      	ands	r3, r2
 80014be:	d100      	bne.n	80014c2 <HAL_RCC_ClockConfig+0x8a>
 80014c0:	e089      	b.n	80015d6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d107      	bne.n	80014da <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014ca:	4b79      	ldr	r3, [pc, #484]	; (80016b0 <HAL_RCC_ClockConfig+0x278>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	2380      	movs	r3, #128	; 0x80
 80014d0:	029b      	lsls	r3, r3, #10
 80014d2:	4013      	ands	r3, r2
 80014d4:	d120      	bne.n	8001518 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e0e1      	b.n	800169e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b03      	cmp	r3, #3
 80014e0:	d107      	bne.n	80014f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80014e2:	4b73      	ldr	r3, [pc, #460]	; (80016b0 <HAL_RCC_ClockConfig+0x278>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	2380      	movs	r3, #128	; 0x80
 80014e8:	049b      	lsls	r3, r3, #18
 80014ea:	4013      	ands	r3, r2
 80014ec:	d114      	bne.n	8001518 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e0d5      	b.n	800169e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d106      	bne.n	8001508 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014fa:	4b6d      	ldr	r3, [pc, #436]	; (80016b0 <HAL_RCC_ClockConfig+0x278>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2204      	movs	r2, #4
 8001500:	4013      	ands	r3, r2
 8001502:	d109      	bne.n	8001518 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e0ca      	b.n	800169e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001508:	4b69      	ldr	r3, [pc, #420]	; (80016b0 <HAL_RCC_ClockConfig+0x278>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	2380      	movs	r3, #128	; 0x80
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4013      	ands	r3, r2
 8001512:	d101      	bne.n	8001518 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e0c2      	b.n	800169e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001518:	4b65      	ldr	r3, [pc, #404]	; (80016b0 <HAL_RCC_ClockConfig+0x278>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	2203      	movs	r2, #3
 800151e:	4393      	bics	r3, r2
 8001520:	0019      	movs	r1, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	4b62      	ldr	r3, [pc, #392]	; (80016b0 <HAL_RCC_ClockConfig+0x278>)
 8001528:	430a      	orrs	r2, r1
 800152a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800152c:	f7ff f974 	bl	8000818 <HAL_GetTick>
 8001530:	0003      	movs	r3, r0
 8001532:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b02      	cmp	r3, #2
 800153a:	d111      	bne.n	8001560 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800153c:	e009      	b.n	8001552 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800153e:	f7ff f96b 	bl	8000818 <HAL_GetTick>
 8001542:	0002      	movs	r2, r0
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	4a58      	ldr	r2, [pc, #352]	; (80016ac <HAL_RCC_ClockConfig+0x274>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e0a5      	b.n	800169e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001552:	4b57      	ldr	r3, [pc, #348]	; (80016b0 <HAL_RCC_ClockConfig+0x278>)
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	220c      	movs	r2, #12
 8001558:	4013      	ands	r3, r2
 800155a:	2b08      	cmp	r3, #8
 800155c:	d1ef      	bne.n	800153e <HAL_RCC_ClockConfig+0x106>
 800155e:	e03a      	b.n	80015d6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2b03      	cmp	r3, #3
 8001566:	d111      	bne.n	800158c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001568:	e009      	b.n	800157e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800156a:	f7ff f955 	bl	8000818 <HAL_GetTick>
 800156e:	0002      	movs	r2, r0
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	4a4d      	ldr	r2, [pc, #308]	; (80016ac <HAL_RCC_ClockConfig+0x274>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d901      	bls.n	800157e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e08f      	b.n	800169e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800157e:	4b4c      	ldr	r3, [pc, #304]	; (80016b0 <HAL_RCC_ClockConfig+0x278>)
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	220c      	movs	r2, #12
 8001584:	4013      	ands	r3, r2
 8001586:	2b0c      	cmp	r3, #12
 8001588:	d1ef      	bne.n	800156a <HAL_RCC_ClockConfig+0x132>
 800158a:	e024      	b.n	80015d6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d11b      	bne.n	80015cc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001594:	e009      	b.n	80015aa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001596:	f7ff f93f 	bl	8000818 <HAL_GetTick>
 800159a:	0002      	movs	r2, r0
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	4a42      	ldr	r2, [pc, #264]	; (80016ac <HAL_RCC_ClockConfig+0x274>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e079      	b.n	800169e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80015aa:	4b41      	ldr	r3, [pc, #260]	; (80016b0 <HAL_RCC_ClockConfig+0x278>)
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	220c      	movs	r2, #12
 80015b0:	4013      	ands	r3, r2
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	d1ef      	bne.n	8001596 <HAL_RCC_ClockConfig+0x15e>
 80015b6:	e00e      	b.n	80015d6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015b8:	f7ff f92e 	bl	8000818 <HAL_GetTick>
 80015bc:	0002      	movs	r2, r0
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	4a3a      	ldr	r2, [pc, #232]	; (80016ac <HAL_RCC_ClockConfig+0x274>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e068      	b.n	800169e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80015cc:	4b38      	ldr	r3, [pc, #224]	; (80016b0 <HAL_RCC_ClockConfig+0x278>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	220c      	movs	r2, #12
 80015d2:	4013      	ands	r3, r2
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015d6:	4b34      	ldr	r3, [pc, #208]	; (80016a8 <HAL_RCC_ClockConfig+0x270>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2201      	movs	r2, #1
 80015dc:	4013      	ands	r3, r2
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d21e      	bcs.n	8001622 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015e4:	4b30      	ldr	r3, [pc, #192]	; (80016a8 <HAL_RCC_ClockConfig+0x270>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2201      	movs	r2, #1
 80015ea:	4393      	bics	r3, r2
 80015ec:	0019      	movs	r1, r3
 80015ee:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <HAL_RCC_ClockConfig+0x270>)
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80015f6:	f7ff f90f 	bl	8000818 <HAL_GetTick>
 80015fa:	0003      	movs	r3, r0
 80015fc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015fe:	e009      	b.n	8001614 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001600:	f7ff f90a 	bl	8000818 <HAL_GetTick>
 8001604:	0002      	movs	r2, r0
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	4a28      	ldr	r2, [pc, #160]	; (80016ac <HAL_RCC_ClockConfig+0x274>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e044      	b.n	800169e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001614:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <HAL_RCC_ClockConfig+0x270>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2201      	movs	r2, #1
 800161a:	4013      	ands	r3, r2
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	429a      	cmp	r2, r3
 8001620:	d1ee      	bne.n	8001600 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2204      	movs	r2, #4
 8001628:	4013      	ands	r3, r2
 800162a:	d009      	beq.n	8001640 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800162c:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <HAL_RCC_ClockConfig+0x278>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	4a20      	ldr	r2, [pc, #128]	; (80016b4 <HAL_RCC_ClockConfig+0x27c>)
 8001632:	4013      	ands	r3, r2
 8001634:	0019      	movs	r1, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68da      	ldr	r2, [r3, #12]
 800163a:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <HAL_RCC_ClockConfig+0x278>)
 800163c:	430a      	orrs	r2, r1
 800163e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2208      	movs	r2, #8
 8001646:	4013      	ands	r3, r2
 8001648:	d00a      	beq.n	8001660 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800164a:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <HAL_RCC_ClockConfig+0x278>)
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	4a1a      	ldr	r2, [pc, #104]	; (80016b8 <HAL_RCC_ClockConfig+0x280>)
 8001650:	4013      	ands	r3, r2
 8001652:	0019      	movs	r1, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	00da      	lsls	r2, r3, #3
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <HAL_RCC_ClockConfig+0x278>)
 800165c:	430a      	orrs	r2, r1
 800165e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001660:	f000 f832 	bl	80016c8 <HAL_RCC_GetSysClockFreq>
 8001664:	0001      	movs	r1, r0
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_RCC_ClockConfig+0x278>)
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	091b      	lsrs	r3, r3, #4
 800166c:	220f      	movs	r2, #15
 800166e:	4013      	ands	r3, r2
 8001670:	4a12      	ldr	r2, [pc, #72]	; (80016bc <HAL_RCC_ClockConfig+0x284>)
 8001672:	5cd3      	ldrb	r3, [r2, r3]
 8001674:	000a      	movs	r2, r1
 8001676:	40da      	lsrs	r2, r3
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <HAL_RCC_ClockConfig+0x288>)
 800167a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <HAL_RCC_ClockConfig+0x28c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	250b      	movs	r5, #11
 8001682:	197c      	adds	r4, r7, r5
 8001684:	0018      	movs	r0, r3
 8001686:	f7ff f881 	bl	800078c <HAL_InitTick>
 800168a:	0003      	movs	r3, r0
 800168c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800168e:	197b      	adds	r3, r7, r5
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d002      	beq.n	800169c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001696:	197b      	adds	r3, r7, r5
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	e000      	b.n	800169e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	0018      	movs	r0, r3
 80016a0:	46bd      	mov	sp, r7
 80016a2:	b004      	add	sp, #16
 80016a4:	bdb0      	pop	{r4, r5, r7, pc}
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	40022000 	.word	0x40022000
 80016ac:	00001388 	.word	0x00001388
 80016b0:	40021000 	.word	0x40021000
 80016b4:	fffff8ff 	.word	0xfffff8ff
 80016b8:	ffffc7ff 	.word	0xffffc7ff
 80016bc:	080019ac 	.word	0x080019ac
 80016c0:	20000000 	.word	0x20000000
 80016c4:	20000004 	.word	0x20000004

080016c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016c8:	b5b0      	push	{r4, r5, r7, lr}
 80016ca:	b08e      	sub	sp, #56	; 0x38
 80016cc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80016ce:	4b4c      	ldr	r3, [pc, #304]	; (8001800 <HAL_RCC_GetSysClockFreq+0x138>)
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016d6:	230c      	movs	r3, #12
 80016d8:	4013      	ands	r3, r2
 80016da:	2b0c      	cmp	r3, #12
 80016dc:	d014      	beq.n	8001708 <HAL_RCC_GetSysClockFreq+0x40>
 80016de:	d900      	bls.n	80016e2 <HAL_RCC_GetSysClockFreq+0x1a>
 80016e0:	e07b      	b.n	80017da <HAL_RCC_GetSysClockFreq+0x112>
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	d002      	beq.n	80016ec <HAL_RCC_GetSysClockFreq+0x24>
 80016e6:	2b08      	cmp	r3, #8
 80016e8:	d00b      	beq.n	8001702 <HAL_RCC_GetSysClockFreq+0x3a>
 80016ea:	e076      	b.n	80017da <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80016ec:	4b44      	ldr	r3, [pc, #272]	; (8001800 <HAL_RCC_GetSysClockFreq+0x138>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2210      	movs	r2, #16
 80016f2:	4013      	ands	r3, r2
 80016f4:	d002      	beq.n	80016fc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80016f6:	4b43      	ldr	r3, [pc, #268]	; (8001804 <HAL_RCC_GetSysClockFreq+0x13c>)
 80016f8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80016fa:	e07c      	b.n	80017f6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80016fc:	4b42      	ldr	r3, [pc, #264]	; (8001808 <HAL_RCC_GetSysClockFreq+0x140>)
 80016fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001700:	e079      	b.n	80017f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001702:	4b42      	ldr	r3, [pc, #264]	; (800180c <HAL_RCC_GetSysClockFreq+0x144>)
 8001704:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001706:	e076      	b.n	80017f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170a:	0c9a      	lsrs	r2, r3, #18
 800170c:	230f      	movs	r3, #15
 800170e:	401a      	ands	r2, r3
 8001710:	4b3f      	ldr	r3, [pc, #252]	; (8001810 <HAL_RCC_GetSysClockFreq+0x148>)
 8001712:	5c9b      	ldrb	r3, [r3, r2]
 8001714:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001718:	0d9a      	lsrs	r2, r3, #22
 800171a:	2303      	movs	r3, #3
 800171c:	4013      	ands	r3, r2
 800171e:	3301      	adds	r3, #1
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001722:	4b37      	ldr	r3, [pc, #220]	; (8001800 <HAL_RCC_GetSysClockFreq+0x138>)
 8001724:	68da      	ldr	r2, [r3, #12]
 8001726:	2380      	movs	r3, #128	; 0x80
 8001728:	025b      	lsls	r3, r3, #9
 800172a:	4013      	ands	r3, r2
 800172c:	d01a      	beq.n	8001764 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800172e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001730:	61bb      	str	r3, [r7, #24]
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
 8001736:	4a35      	ldr	r2, [pc, #212]	; (800180c <HAL_RCC_GetSysClockFreq+0x144>)
 8001738:	2300      	movs	r3, #0
 800173a:	69b8      	ldr	r0, [r7, #24]
 800173c:	69f9      	ldr	r1, [r7, #28]
 800173e:	f7fe fd8f 	bl	8000260 <__aeabi_lmul>
 8001742:	0002      	movs	r2, r0
 8001744:	000b      	movs	r3, r1
 8001746:	0010      	movs	r0, r2
 8001748:	0019      	movs	r1, r3
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	f7fe fd63 	bl	8000220 <__aeabi_uldivmod>
 800175a:	0002      	movs	r2, r0
 800175c:	000b      	movs	r3, r1
 800175e:	0013      	movs	r3, r2
 8001760:	637b      	str	r3, [r7, #52]	; 0x34
 8001762:	e037      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001764:	4b26      	ldr	r3, [pc, #152]	; (8001800 <HAL_RCC_GetSysClockFreq+0x138>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2210      	movs	r2, #16
 800176a:	4013      	ands	r3, r2
 800176c:	d01a      	beq.n	80017a4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800176e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	4a23      	ldr	r2, [pc, #140]	; (8001804 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001778:	2300      	movs	r3, #0
 800177a:	68b8      	ldr	r0, [r7, #8]
 800177c:	68f9      	ldr	r1, [r7, #12]
 800177e:	f7fe fd6f 	bl	8000260 <__aeabi_lmul>
 8001782:	0002      	movs	r2, r0
 8001784:	000b      	movs	r3, r1
 8001786:	0010      	movs	r0, r2
 8001788:	0019      	movs	r1, r3
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	603b      	str	r3, [r7, #0]
 800178e:	2300      	movs	r3, #0
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f7fe fd43 	bl	8000220 <__aeabi_uldivmod>
 800179a:	0002      	movs	r2, r0
 800179c:	000b      	movs	r3, r1
 800179e:	0013      	movs	r3, r2
 80017a0:	637b      	str	r3, [r7, #52]	; 0x34
 80017a2:	e017      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80017a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a6:	0018      	movs	r0, r3
 80017a8:	2300      	movs	r3, #0
 80017aa:	0019      	movs	r1, r3
 80017ac:	4a16      	ldr	r2, [pc, #88]	; (8001808 <HAL_RCC_GetSysClockFreq+0x140>)
 80017ae:	2300      	movs	r3, #0
 80017b0:	f7fe fd56 	bl	8000260 <__aeabi_lmul>
 80017b4:	0002      	movs	r2, r0
 80017b6:	000b      	movs	r3, r1
 80017b8:	0010      	movs	r0, r2
 80017ba:	0019      	movs	r1, r3
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017be:	001c      	movs	r4, r3
 80017c0:	2300      	movs	r3, #0
 80017c2:	001d      	movs	r5, r3
 80017c4:	0022      	movs	r2, r4
 80017c6:	002b      	movs	r3, r5
 80017c8:	f7fe fd2a 	bl	8000220 <__aeabi_uldivmod>
 80017cc:	0002      	movs	r2, r0
 80017ce:	000b      	movs	r3, r1
 80017d0:	0013      	movs	r3, r2
 80017d2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80017d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017d6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017d8:	e00d      	b.n	80017f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HAL_RCC_GetSysClockFreq+0x138>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	0b5b      	lsrs	r3, r3, #13
 80017e0:	2207      	movs	r2, #7
 80017e2:	4013      	ands	r3, r2
 80017e4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80017e6:	6a3b      	ldr	r3, [r7, #32]
 80017e8:	3301      	adds	r3, #1
 80017ea:	2280      	movs	r2, #128	; 0x80
 80017ec:	0212      	lsls	r2, r2, #8
 80017ee:	409a      	lsls	r2, r3
 80017f0:	0013      	movs	r3, r2
 80017f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017f4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80017f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80017f8:	0018      	movs	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	b00e      	add	sp, #56	; 0x38
 80017fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001800:	40021000 	.word	0x40021000
 8001804:	003d0900 	.word	0x003d0900
 8001808:	00f42400 	.word	0x00f42400
 800180c:	007a1200 	.word	0x007a1200
 8001810:	080019bc 	.word	0x080019bc

08001814 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e083      	b.n	800192e <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182a:	2b00      	cmp	r3, #0
 800182c:	d109      	bne.n	8001842 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	2382      	movs	r3, #130	; 0x82
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	429a      	cmp	r2, r3
 8001838:	d009      	beq.n	800184e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	61da      	str	r2, [r3, #28]
 8001840:	e005      	b.n	800184e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2251      	movs	r2, #81	; 0x51
 8001858:	5c9b      	ldrb	r3, [r3, r2]
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	d107      	bne.n	8001870 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2250      	movs	r2, #80	; 0x50
 8001864:	2100      	movs	r1, #0
 8001866:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	0018      	movs	r0, r3
 800186c:	f7fe fee4 	bl	8000638 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2251      	movs	r2, #81	; 0x51
 8001874:	2102      	movs	r1, #2
 8001876:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2140      	movs	r1, #64	; 0x40
 8001884:	438a      	bics	r2, r1
 8001886:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	2382      	movs	r3, #130	; 0x82
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	401a      	ands	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6899      	ldr	r1, [r3, #8]
 8001896:	2384      	movs	r3, #132	; 0x84
 8001898:	021b      	lsls	r3, r3, #8
 800189a:	400b      	ands	r3, r1
 800189c:	431a      	orrs	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68d9      	ldr	r1, [r3, #12]
 80018a2:	2380      	movs	r3, #128	; 0x80
 80018a4:	011b      	lsls	r3, r3, #4
 80018a6:	400b      	ands	r3, r1
 80018a8:	431a      	orrs	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	2102      	movs	r1, #2
 80018b0:	400b      	ands	r3, r1
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	2101      	movs	r1, #1
 80018ba:	400b      	ands	r3, r1
 80018bc:	431a      	orrs	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6999      	ldr	r1, [r3, #24]
 80018c2:	2380      	movs	r3, #128	; 0x80
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	400b      	ands	r3, r1
 80018c8:	431a      	orrs	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	2138      	movs	r1, #56	; 0x38
 80018d0:	400b      	ands	r3, r1
 80018d2:	431a      	orrs	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	2180      	movs	r1, #128	; 0x80
 80018da:	400b      	ands	r3, r1
 80018dc:	431a      	orrs	r2, r3
 80018de:	0011      	movs	r1, r2
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	019b      	lsls	r3, r3, #6
 80018e8:	401a      	ands	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	0c1b      	lsrs	r3, r3, #16
 80018f8:	2204      	movs	r2, #4
 80018fa:	4013      	ands	r3, r2
 80018fc:	0019      	movs	r1, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001902:	2210      	movs	r2, #16
 8001904:	401a      	ands	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	69da      	ldr	r2, [r3, #28]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4907      	ldr	r1, [pc, #28]	; (8001938 <HAL_SPI_Init+0x124>)
 800191a:	400a      	ands	r2, r1
 800191c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2251      	movs	r2, #81	; 0x51
 8001928:	2101      	movs	r1, #1
 800192a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	0018      	movs	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	b002      	add	sp, #8
 8001934:	bd80      	pop	{r7, pc}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	fffff7ff 	.word	0xfffff7ff

0800193c <__libc_init_array>:
 800193c:	b570      	push	{r4, r5, r6, lr}
 800193e:	2600      	movs	r6, #0
 8001940:	4d0c      	ldr	r5, [pc, #48]	; (8001974 <__libc_init_array+0x38>)
 8001942:	4c0d      	ldr	r4, [pc, #52]	; (8001978 <__libc_init_array+0x3c>)
 8001944:	1b64      	subs	r4, r4, r5
 8001946:	10a4      	asrs	r4, r4, #2
 8001948:	42a6      	cmp	r6, r4
 800194a:	d109      	bne.n	8001960 <__libc_init_array+0x24>
 800194c:	2600      	movs	r6, #0
 800194e:	f000 f821 	bl	8001994 <_init>
 8001952:	4d0a      	ldr	r5, [pc, #40]	; (800197c <__libc_init_array+0x40>)
 8001954:	4c0a      	ldr	r4, [pc, #40]	; (8001980 <__libc_init_array+0x44>)
 8001956:	1b64      	subs	r4, r4, r5
 8001958:	10a4      	asrs	r4, r4, #2
 800195a:	42a6      	cmp	r6, r4
 800195c:	d105      	bne.n	800196a <__libc_init_array+0x2e>
 800195e:	bd70      	pop	{r4, r5, r6, pc}
 8001960:	00b3      	lsls	r3, r6, #2
 8001962:	58eb      	ldr	r3, [r5, r3]
 8001964:	4798      	blx	r3
 8001966:	3601      	adds	r6, #1
 8001968:	e7ee      	b.n	8001948 <__libc_init_array+0xc>
 800196a:	00b3      	lsls	r3, r6, #2
 800196c:	58eb      	ldr	r3, [r5, r3]
 800196e:	4798      	blx	r3
 8001970:	3601      	adds	r6, #1
 8001972:	e7f2      	b.n	800195a <__libc_init_array+0x1e>
 8001974:	080019d0 	.word	0x080019d0
 8001978:	080019d0 	.word	0x080019d0
 800197c:	080019d0 	.word	0x080019d0
 8001980:	080019d4 	.word	0x080019d4

08001984 <memset>:
 8001984:	0003      	movs	r3, r0
 8001986:	1882      	adds	r2, r0, r2
 8001988:	4293      	cmp	r3, r2
 800198a:	d100      	bne.n	800198e <memset+0xa>
 800198c:	4770      	bx	lr
 800198e:	7019      	strb	r1, [r3, #0]
 8001990:	3301      	adds	r3, #1
 8001992:	e7f9      	b.n	8001988 <memset+0x4>

08001994 <_init>:
 8001994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800199a:	bc08      	pop	{r3}
 800199c:	469e      	mov	lr, r3
 800199e:	4770      	bx	lr

080019a0 <_fini>:
 80019a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019a6:	bc08      	pop	{r3}
 80019a8:	469e      	mov	lr, r3
 80019aa:	4770      	bx	lr
